package com.gubanov.dmitry.cookie.testUtil;

import android.content.Context;

import com.gubanov.dmitry.cookie.BuildConfig;
import com.gubanov.dmitry.cookie.asset.Lottery;
import com.gubanov.dmitry.cookie.asset.Reward;
import com.gubanov.dmitry.cookie.asset.User;
import com.gubanov.dmitry.cookie.util.DatabaseInterface;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.RobolectricGradleTestRunner;
import org.robolectric.RuntimeEnvironment;
import org.robolectric.annotation.Config;

import static org.junit.Assert.assertEquals;

import java.util.List;

@RunWith(RobolectricGradleTestRunner.class)
@Config(constants = BuildConfig.class, sdk = 18)

// TODO: PRIORITY 3: rewrite tests to use @before @after to be cleaner
// TODO: PRIORITY 1: test the IDs auto-generated by the DB

/**
 * Tester for the DatabaseInterface.
 */
public class DatabaseInterfaceTest{
    @Test
    public void testCreateAndGetUser() {
        Context context = RuntimeEnvironment.application.getBaseContext();
        DatabaseInterface dbi = new DatabaseInterface(context, true);

        String oneUsername = "Dmitry";
        String twoUsername = "Yuri";

        List<User> users;
        User oneUser;
        User twoUser;

        users = dbi.getUsers();
        assertEquals(0, users.size());

        dbi.createUser(oneUsername);

        users = dbi.getUsers();
        assertEquals(1, users.size());

        dbi.createUser(twoUsername);

        users = dbi.getUsers();
        assertEquals(2, users.size());

        oneUser = dbi.getUser(oneUsername);
        twoUser = dbi.getUser(twoUsername);

        assertEquals(oneUsername, oneUser.getName());
        assertEquals(twoUsername, twoUser.getName());
    }
    @Test
    public void testCreateAndGetLotteryReward() {
        Context context = RuntimeEnvironment.application.getBaseContext();
        DatabaseInterface dbi = new DatabaseInterface(context, true);

        String username = "Dmitry";
        dbi.createUser(username);
        User user = dbi.getUser(username);

        Reward newOneReward = new Reward(4, "message", false, "hello");
        Reward newTwoReward = new Reward(7, "task", true, "do this");

        String lotteryType = "daily";
        String lotteryTypeTwo = "weekly";

        dbi.createLottery(lotteryType);
        dbi.createLottery(lotteryTypeTwo);

        List<Reward> rewards;

        rewards = dbi.getRewards(user, lotteryType);
        assertEquals(0, rewards.size());
        rewards = dbi.getRewards(user, lotteryTypeTwo);
        assertEquals(0, rewards.size());

        dbi.createReward(newOneReward, user, lotteryType);

        rewards = dbi.getRewards(user, lotteryType);
        assertEquals(1, rewards.size());
        rewards = dbi.getRewards(user, lotteryTypeTwo);
        assertEquals(0, rewards.size());

        dbi.createReward(newTwoReward, user, lotteryTypeTwo);

        rewards = dbi.getRewards(user, lotteryType);
        assertEquals(1, rewards.size());
        rewards = dbi.getRewards(user, lotteryTypeTwo);
        assertEquals(1, rewards.size());

        Reward oneReward;
        Reward twoReward;

        oneReward = dbi.getRewards(user, lotteryType).get(0);
        assertEquals(newOneReward.getWeight(), oneReward.getWeight());
        assertEquals(newOneReward.getType(), oneReward.getType());
        assertEquals(newOneReward.isUsable(), oneReward.isUsable());
        assertEquals(newOneReward.getContent(), oneReward.getContent());

        twoReward = dbi.getRewards(user, lotteryTypeTwo).get(0);
        assertEquals(newTwoReward.getWeight(), twoReward.getWeight());
        assertEquals(newTwoReward.getType(), twoReward.getType());
        assertEquals(newTwoReward.isUsable(), twoReward.isUsable());
        assertEquals(newTwoReward.getContent(), twoReward.getContent());

    }

    @Test
    public void testAddAndGetUserReward() {
        Context context = RuntimeEnvironment.application.getBaseContext();
        DatabaseInterface dbi = new DatabaseInterface(context, true);

        String username = "Dmitry";
        dbi.createUser(username);
        User user = dbi.getUser(username);

        Reward newOneReward = new Reward(4, "message", false, "hello");
        Reward newTwoReward = new Reward(7, "task", true, "do this");

        List<Reward> rewards;
        Reward oneReward;
        Reward twoReward;

        rewards = dbi.getRewards(user);
        assertEquals(0, rewards.size());

        dbi.addRewardToUser(newOneReward, user);

        rewards = dbi.getRewards(user);
        assertEquals(1, rewards.size());

        dbi.addRewardToUser(newTwoReward, user);

        rewards = dbi.getRewards(user);
        assertEquals(2, rewards.size());

        oneReward = dbi.getRewards(user).get(0);
        twoReward = dbi.getRewards(user).get(1);
        assertEquals(newOneReward.getWeight(), oneReward.getWeight());
        assertEquals(newOneReward.getType(), oneReward.getType());
        assertEquals(newOneReward.isUsable(), oneReward.isUsable());
        assertEquals(newOneReward.getContent(), oneReward.getContent());
        assertEquals(newTwoReward.getWeight(), twoReward.getWeight());
        assertEquals(newTwoReward.getType(), twoReward.getType());
        assertEquals(newTwoReward.isUsable(), twoReward.isUsable());
        assertEquals(newTwoReward.getContent(), twoReward.getContent());
    }

    @Test
    public void testCreateAndGetLottery() {
        Context context = RuntimeEnvironment.application.getBaseContext();
        DatabaseInterface dbi = new DatabaseInterface(context, true);

        List<Lottery> lotteries;
        String oneLotteryType = "daily";
        String twoLotteryType = "weekly";
        String threeLotteryType = "monthly";
        Lottery oneLottery;
        Lottery twoLottery;
        Lottery threeLottery;

        lotteries = dbi.getLotteries();
        assertEquals(0, lotteries.size());

        dbi.createLottery(oneLotteryType);

        lotteries = dbi.getLotteries();
        assertEquals(1, lotteries.size());


        dbi.createLottery(twoLotteryType);

        lotteries = dbi.getLotteries();
        assertEquals(2, lotteries.size());

        dbi.createLottery(threeLotteryType);

        lotteries = dbi.getLotteries();
        assertEquals(3, lotteries.size());

        oneLottery = dbi.getLottery(oneLotteryType);
        twoLottery = dbi.getLottery(twoLotteryType);
        threeLottery = dbi.getLottery(threeLotteryType);
        assertEquals(oneLotteryType, oneLottery.getType());
        assertEquals(twoLotteryType, twoLottery.getType());
        assertEquals(threeLotteryType, threeLottery.getType());
    }
}
