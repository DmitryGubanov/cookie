package com.gubanov.dmitry.cookie.testUtil;

import android.content.Context;

import com.gubanov.dmitry.cookie.BuildConfig;
import com.gubanov.dmitry.cookie.asset.Lottery;
import com.gubanov.dmitry.cookie.asset.Reward;
import com.gubanov.dmitry.cookie.asset.User;
import com.gubanov.dmitry.cookie.util.DatabaseInterface;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.RobolectricGradleTestRunner;
import org.robolectric.RuntimeEnvironment;
import org.robolectric.annotation.Config;

import static org.junit.Assert.assertEquals;

import java.util.Calendar;
import java.util.Date;
import java.util.List;

@RunWith(RobolectricGradleTestRunner.class)
@Config(constants = BuildConfig.class, sdk = 18)

// TODO: PRIORITY 3: rewrite tests to use @before @after to be cleaner
// TODO: PRIORITY 1: test the IDs auto-generated by the DB

/**
 * Tester for the DatabaseInterface.
 *
 * The motivation for this testing module is to test interactions with the database.
 * ex. if a create is performed, does the object exist in the DB?
 */
public class DatabaseInterfaceTest {
    @Test
    public void testCreateAndGetUser() {
        Context context = RuntimeEnvironment.application.getBaseContext();
        DatabaseInterface dbi = new DatabaseInterface(context, true);

        String oneUsername = "Dmitry";
        String twoUsername = "Yuri";

        List<User> users;
        User oneUser;
        User twoUser;

        users = dbi.getUsers();
        assertEquals("No users added, so should be 0 users", 0, users.size());

        dbi.createUser(oneUsername);

        users = dbi.getUsers();
        assertEquals("1 user added, so should be 1 user", 1, users.size());

        dbi.createUser(twoUsername);

        users = dbi.getUsers();
        assertEquals("2 users added, so should be 2 users", 2, users.size());

        oneUser = dbi.getUser(oneUsername);
        twoUser = dbi.getUser(twoUsername);

        assertEquals("First user's username should be the same", oneUsername, oneUser.getName());
        assertEquals("Second user's username should be the same", twoUsername, twoUser.getName());
    }

    @Test
    public void testCreateAndGetLotteryReward() {
        Context context = RuntimeEnvironment.application.getBaseContext();
        DatabaseInterface dbi = new DatabaseInterface(context, true);

        String username = "Dmitry";
        dbi.createUser(username);

        String lotteryType = "daily";
        String lotteryTypeTwo = "weekly";
        dbi.createLottery(lotteryType);
        dbi.createLottery(lotteryTypeTwo);
        dbi.createLottery(username, lotteryType);
        dbi.createLottery(username, lotteryTypeTwo);

        List<Reward> rewards;

        rewards = dbi.getRewards(username, lotteryType);
        assertEquals("No rewards created for type one, so should be 0 rewards for type one",
                0, rewards.size());
        rewards = dbi.getRewards(username, lotteryTypeTwo);
        assertEquals("No rewards created for type two, so should be 0 rewards for type two",
                0, rewards.size());

        Reward newOneReward = new Reward(4, "message", false, "hello");
        Reward newTwoReward = new Reward(7, "task", true, "do this");

        long rewardOneId = dbi.createReward(newOneReward);
        dbi.createReward(
                new Reward(
                        rewardOneId,
                        newOneReward.getWeight(),
                        newOneReward.getType(),
                        newOneReward.isUsable(),
                        newOneReward.getContent()),
                username,
                lotteryType);

        rewards = dbi.getRewards(username, lotteryType);
        assertEquals("1 reward created for type one, so should be 1 rewards for type one",
                1, rewards.size());
        rewards = dbi.getRewards(username, lotteryTypeTwo);
        assertEquals("No rewards created for type two, so should be 0 rewards for type two",
                0, rewards.size());

        long rewardTwoId = dbi.createReward(newTwoReward);
        dbi.createReward(
                new Reward(
                        rewardTwoId,
                        newTwoReward.getWeight(),
                        newTwoReward.getType(),
                        newTwoReward.isUsable(),
                        newTwoReward.getContent()),
                username,
                lotteryTypeTwo);

        rewards = dbi.getRewards(username, lotteryType);
        assertEquals("1 reward created for type one, so should be 1 rewards for type one",
                1, rewards.size());
        rewards = dbi.getRewards(username, lotteryTypeTwo);
        assertEquals("1 reward created for type two, so should be 1 reward for type two",
                1, rewards.size());

        Reward oneReward;
        Reward twoReward;

        oneReward = dbi.getRewards(username, lotteryType).get(0);
        assertEquals("First rewards' weights should match",
                newOneReward.getWeight(), oneReward.getWeight());
        assertEquals("First rewards' types should match",
                newOneReward.getType(), oneReward.getType());
        assertEquals("First rewards' usability should match",
                newOneReward.isUsable(), oneReward.isUsable());
        assertEquals("First rewards' content should match",
                newOneReward.getContent(), oneReward.getContent());

        twoReward = dbi.getRewards(username, lotteryTypeTwo).get(0);
        assertEquals("Second rewards' weights should match",
                newTwoReward.getWeight(), twoReward.getWeight());
        assertEquals("Second rewards' types should match",
                newTwoReward.getType(), twoReward.getType());
        assertEquals("Second rewards' usability should match",
                newTwoReward.isUsable(), twoReward.isUsable());
        assertEquals("Second rewards' content should match",
                newTwoReward.getContent(), twoReward.getContent());

    }

    @Test
    public void testAddAndGetUserReward() {
        Context context = RuntimeEnvironment.application.getBaseContext();
        DatabaseInterface dbi = new DatabaseInterface(context, true);

        String username = "Dmitry";
        dbi.createUser(username);
        User user = dbi.getUser(username);

        Reward newOneReward = new Reward(4, "message", false, "hello");
        Reward newTwoReward = new Reward(7, "task", true, "do this");

        List<Reward> rewards;
        Reward oneReward;
        Reward twoReward;

        rewards = dbi.getRewards(username);
        assertEquals("No rewards added to user, so user should have 0 rewards",
                0, rewards.size());


        long newOneRewardId = dbi.createReward(newOneReward);
        dbi.addRewardToUser(
                new Reward(
                        newOneRewardId,
                        newOneReward.getWeight(),
                        newOneReward.getType(),
                        newOneReward.isUsable(),
                        newOneReward.getContent()),
                user);

        rewards = dbi.getRewards(username);
        assertEquals("1 reward added to user, so user should have 1 reward",
                1, rewards.size());

        long newTwoRewardId = dbi.createReward(newTwoReward);
        dbi.addRewardToUser(
                new Reward(
                        newTwoRewardId,
                        newTwoReward.getWeight(),
                        newTwoReward.getType(),
                        newTwoReward.isUsable(),
                        newTwoReward.getContent()),
                user);

        rewards = dbi.getRewards(username);
        assertEquals("2 rewards added to user, so user should have 2 rewards",
                2, rewards.size());

        oneReward = dbi.getRewards(username).get(0);
        twoReward = dbi.getRewards(username).get(1);
        assertEquals("First rewards' weights should match",
                newOneReward.getWeight(), oneReward.getWeight());
        assertEquals("First rewards' types should match",
                newOneReward.getType(), oneReward.getType());
        assertEquals("First rewards' usability should match",
                newOneReward.isUsable(), oneReward.isUsable());
        assertEquals("First rewards' content should match",
                newOneReward.getContent(), oneReward.getContent());
        assertEquals("Second rewards' weights should match",
                newTwoReward.getWeight(), twoReward.getWeight());
        assertEquals("Second rewards' types should match",
                newTwoReward.getType(), twoReward.getType());
        assertEquals("Second rewards' usability should match",
                newTwoReward.isUsable(), twoReward.isUsable());
        assertEquals("Second rewards' content should match",
                newTwoReward.getContent(), twoReward.getContent());
    }

    @Test
    public void testRemoveUserReward() {
        Context context = RuntimeEnvironment.application.getBaseContext();
        DatabaseInterface dbi = new DatabaseInterface(context, true);

        String username = "Dmitry";
        dbi.createUser(username);
        User user = dbi.getUser(username);

        Reward newReward = new Reward(4, "message", false, "hello");
        List<Reward> rewards;

        rewards = dbi.getRewards(username);
        assertEquals(
                "No rewards added to user, so user should have 0 rewards",
                0, rewards.size()
        );


        long rewardId = dbi.createReward(newReward);
        Reward createdReward = new Reward(
                rewardId,
                newReward.getWeight(),
                newReward.getType(),
                newReward.isUsable(),
                newReward.getContent()
        );

        dbi.addRewardToUser(createdReward, user);

        rewards = dbi.getRewards(username);
        assertEquals(
                "Reward added to user, so user should have 1 reward",
                1,
                rewards.size()
        );

        dbi.removeRewardFromUser(createdReward, user);

        rewards = dbi.getRewards(username);
        assertEquals(
                "Reward removed from user, so user should have 0 rewards",
                0,
                rewards.size()
        );

    }

    @Test
    public void testChangeAndGetRewardCount() {
        Context context = RuntimeEnvironment.application.getBaseContext();
        DatabaseInterface dbi = new DatabaseInterface(context, true);

        String username = "Dmitry";
        dbi.createUser(username);
        User user = dbi.getUser(username);

        Reward newReward = new Reward(4, "message", false, "hello");

        long rewardId = dbi.createReward(newReward);

        Reward createdReward = new Reward(
                rewardId,
                newReward.getWeight(),
                newReward.getType(),
                newReward.isUsable(),
                newReward.getContent()
        );

        dbi.addRewardToUser(createdReward, user);

        assertEquals(
                "Reward added to user, so should have 1 of this reward",
                1,
                dbi.getRewardCount(rewardId, user)
        );

        dbi.changeRewardCountForUser(createdReward, user, 1);

        assertEquals(
                "Added 1 to reward count of 1, so reward count should be 2",
                2,
                dbi.getRewardCount(rewardId, user)
        );

        dbi.changeRewardCountForUser(createdReward, user, -1);

        assertEquals(
                "Added -1 to reward count of 2, so reward count should be 1",
                1,
                dbi.getRewardCount(rewardId, user)
        );
    }

    @Test
    public void testCreateAndGetLottery() {
        Context context = RuntimeEnvironment.application.getBaseContext();
        DatabaseInterface dbi = new DatabaseInterface(context, true);

        List<Lottery> lotteries;
        String oneLotteryType = "daily";
        String twoLotteryType = "weekly";
        String threeLotteryType = "monthly";
        Lottery oneLottery;
        Lottery twoLottery;
        Lottery threeLottery;

        lotteries = dbi.getLotteries();
        assertEquals(
                "No lotteries created, so there should be 0 lotteries",
                0,
                lotteries.size());

        dbi.createLottery(oneLotteryType);

        lotteries = dbi.getLotteries();
        assertEquals(
                "1 lottery created, so there should be 1 lottery",
                1,
                lotteries.size());


        dbi.createLottery(twoLotteryType);

        lotteries = dbi.getLotteries();
        assertEquals(
                "2 lotteries created, so there should be 2 lotteries",
                2,
                lotteries.size());

        dbi.createLottery(threeLotteryType);

        lotteries = dbi.getLotteries();
        assertEquals(
                "3 lotteries created, so there should be 3 lotteries",
                3,
                lotteries.size());

        oneLottery = dbi.getLottery(oneLotteryType);
        twoLottery = dbi.getLottery(twoLotteryType);
        threeLottery = dbi.getLottery(threeLotteryType);
        assertEquals(
                "First lottery's type should match",
                oneLotteryType.toUpperCase(),
                oneLottery.getType()
        );
        assertEquals(
                "Second lottery's' type should match",
                twoLotteryType.toUpperCase(),
                twoLottery.getType()
        );
        assertEquals(
                "Third lottery's type should match",
                threeLotteryType.toUpperCase(),
                threeLottery.getType()
        );
    }

    public void testCreateAndGetUserLottery() {
        Context context = RuntimeEnvironment.application.getBaseContext();
        DatabaseInterface dbi = new DatabaseInterface(context, true);

        String username = "Dmitry";
        dbi.createUser(username);

        String oneLotteryType = "daily";
        String twoLotteryType = "weekly";
        String threeLotteryType = "monthly";

        dbi.createLottery(oneLotteryType);
        dbi.createLottery(twoLotteryType);
        dbi.createLottery(threeLotteryType);

        List<Lottery> lotteries = dbi.getLotteries(username);

        assertEquals(
                "0 lotteries created for user, so should have 0 lotteries",
                0,
                lotteries.size()
        );

        dbi.createLottery(username, oneLotteryType);

        lotteries = dbi.getLotteries(username);

        assertEquals(
                "1 lottery created for user, so should have 1 lotteries",
                1,
                lotteries.size()
        );

        dbi.createLottery(username, twoLotteryType);

        lotteries = dbi.getLotteries(username);

        assertEquals(
                "2 lotteries created for user, so should have 2 lotteries",
                2,
                lotteries.size()
        );

        dbi.createLottery(username, threeLotteryType);

        lotteries = dbi.getLotteries(username);

        assertEquals(
                "3 lotteries created for user, so should have 3 lotteries",
                3,
                lotteries.size()
        );
    }

    @Test
    public void testUpdateUserLotteryDate() {
        Context context = RuntimeEnvironment.application.getBaseContext();
        DatabaseInterface dbi = new DatabaseInterface(context, true);

        Calendar calendar = Calendar.getInstance();

        String username = "Dmitry";
        dbi.createUser(username);

        String lotteryType = "daily";
        dbi.createLottery(lotteryType);
        dbi.createLottery(username, lotteryType);
        Lottery userLottery = dbi.getLottery(username, lotteryType);

        Date oldDate = userLottery.getDateAvailable();

        calendar.setTime(oldDate);
        calendar.add(Calendar.DAY_OF_MONTH, 1);

        Date newDate = calendar.getTime();

        Lottery updatedUserLottery = new Lottery(
                userLottery.getId(),
                userLottery.getType(),
                newDate
        );

        assertEquals(
                "Lottery has not been updated, should still have old date",
                oldDate,
                dbi.getLottery(username, lotteryType).getDateAvailable()
        );

        dbi.updateUserLottery(updatedUserLottery);

        assertEquals(
                "Lottery has been updated, should have new date",
                newDate,
                dbi.getLottery(username, lotteryType).getDateAvailable()
        );

    }
}
